
../build/bin/geth --datadir signer/data account new


../build/bin/geth --datadir signer/data init clique.json


./solc/solc --optimize --bin --asm ../src/VerifySignature.sol


./solc/solc --optimize --bin ../src/VerifySignature.sol


../build/bin/geth --datadir signer/data --networkid 55661 --port 2002 --unlock 492f3232b3e2affb484ddebd3bc84c091b68626f --password signer/passwd.txt console


eth.getBalance(eth.accounts[0])


sha3Msg = web3.sha3("blockchain")

signedData = eth.sign(eth.accounts[0], sha3Msg)



========================= VerifyProof =============================

abi=[{"constant":false,"inputs":[{"name":"proof","type":"bytes"},{"name":"data_hash","type":"bytes32"},{"name":"result","type":"uint256"},{"name":"coefficent","type":"bytes"}],"name":"verifyProof","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]


sample=eth.contract(abi)


SampleHEX="0x608060405234801561001057600080fd5b506102b9806100206000396000f3006080604052600436106100405763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166343d66ff98114610045575b600080fd5b34801561005157600080fd5b5061018b6004803603608081101561006857600080fd5b81019060208101813564010000000081111561008357600080fd5b82018360208201111561009557600080fd5b803590602001918460018302840111640100000000831117156100b757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359591945092506060810191506040013564010000000081111561011657600080fd5b82018360208201111561012857600080fd5b8035906020019184600183028401116401000000008311171561014a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061019d945050505050565b60408051918252519081900360200190f35b6000600c858585856040518085805190602001908083835b602083106101d45780518252601f1990920191602091820191016101b5565b51815160209384036101000a600019018019909216911617905292018681528083018690528451604090910192850191508083835b602083106102285780518252601f199092019160209182019101610209565b6001836020036101000a038019825116818451168082178552505050505050905001945050505050602060405180830381855afa15801561026d573d6000803e3d6000fd5b5050506040513d602081101561028257600080fd5b5051959450505050505600a165627a7a72305820c543424d0ae8d05b1b9e8565d42fbe46ac3861ac632fba9f3a82b576f8774e310029"


thesample=sample.new({from:eth.accounts[0],data:SampleHEX,gas:3000000}, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })


txpool.status


miner.start()


miner.stop()


samplecontract=sample.at("")


samplecontract.verifyProof.call(proof, hashData, premium, coeff)

=================== geth gennerate proof ==========================


hashData = [239, 253, 11, 127, 28, 203, 161, 22, 46, 232, 22, 247, 49, 198, 43, 72, 89, 48, 81, 65, 153, 14, 92, 10, 206, 64, 211, 61, 11, 17, 103, 209]

tupleData = [66, 107, 194, 216, 77, 200, 103, 130, 129, 232, 149, 122, 64, 158, 193, 72, 230, 207, 251, 232, 175, 230, 186, 79, 156, 111, 25, 120, 221, 122, 247, 233, 3, 140, 206, 66, 171, 211, 102, 184, 62, 222, 126, 0, 145, 48, 222, 83, 114, 205, 247, 61, 238, 130, 81, 20, 140, 180, 141, 27, 154, 246, 138, 208]

dataCoeff = [10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

0, 0, 0, 0, 0, 0, 0, 0, 0, 0

admin.genProof(tupleData, hashData, dataCoeff)



